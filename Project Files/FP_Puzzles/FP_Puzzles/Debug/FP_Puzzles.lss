
FP_Puzzles.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000580  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010c  0080010c  00000620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005da  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000028d  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f6  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cb  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024d  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d4 c0       	rjmp	.+424    	; 0x1de <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	40 d1       	rcall	.+640    	; 0x344 <main>
  c4:	5b c2       	rjmp	.+1206   	; 0x57c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
}

void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24
  e6:	10 92 c5 00 	sts	0x00C5, r1
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24
 106:	10 92 cd 00 	sts	0x00CD, r1
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8
 114:	88 23       	and	r24, r24
 116:	84 f0       	brlt	.+32     	; 0x138 <USART_Flush+0x2c>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0
 11e:	88 23       	and	r24, r24
 120:	ac f4       	brge	.+42     	; 0x14c <USART_Flush+0x40>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 93 0e 01 	sts	0x010E, r24
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	d4 f3       	brlt	.-12     	; 0x12a <USART_Flush+0x1e>
 136:	08 95       	ret
 138:	ae ec       	ldi	r26, 0xCE	; 206
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e8 ec       	ldi	r30, 0xC8	; 200
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	80 93 0e 01 	sts	0x010E, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	d4 f3       	brlt	.-12     	; 0x140 <USART_Flush+0x34>
 14c:	08 95       	ret

0000014e <USART_Send>:
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	41 f0       	breq	.+16     	; 0x162 <USART_Send+0x14>
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	90 81       	ld	r25, Z
 158:	95 ff       	sbrs	r25, 5
 15a:	fd cf       	rjmp	.-6      	; 0x156 <USART_Send+0x8>
 15c:	80 93 c6 00 	sts	0x00C6, r24
 160:	08 95       	ret
 162:	e8 ec       	ldi	r30, 0xC8	; 200
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	95 ff       	sbrs	r25, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <USART_Send+0x18>
 16c:	80 93 ce 00 	sts	0x00CE, r24
 170:	08 95       	ret

00000172 <USART_Receive>:
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	41 f0       	breq	.+16     	; 0x186 <USART_Receive+0x14>
 176:	e0 ec       	ldi	r30, 0xC0	; 192
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	ec f7       	brge	.-6      	; 0x17a <USART_Receive+0x8>
 180:	80 91 c6 00 	lds	r24, 0x00C6
 184:	08 95       	ret
 186:	e8 ec       	ldi	r30, 0xC8	; 200
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 23       	and	r24, r24
 18e:	ec f7       	brge	.-6      	; 0x18a <USART_Receive+0x18>
 190:	80 91 ce 00 	lds	r24, 0x00CE
 194:	08 95       	ret

00000196 <TimerOn>:
 196:	8b e0       	ldi	r24, 0x0B	; 11
 198:	80 93 81 00 	sts	0x0081, r24
 19c:	8d e7       	ldi	r24, 0x7D	; 125
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 89 00 	sts	0x0089, r25
 1a4:	80 93 88 00 	sts	0x0088, r24
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 6f 00 	sts	0x006F, r24
 1ae:	10 92 85 00 	sts	0x0085, r1
 1b2:	10 92 84 00 	sts	0x0084, r1
 1b6:	80 91 07 01 	lds	r24, 0x0107
 1ba:	90 91 08 01 	lds	r25, 0x0108
 1be:	a0 91 09 01 	lds	r26, 0x0109
 1c2:	b0 91 0a 01 	lds	r27, 0x010A
 1c6:	80 93 0f 01 	sts	0x010F, r24
 1ca:	90 93 10 01 	sts	0x0110, r25
 1ce:	a0 93 11 01 	sts	0x0111, r26
 1d2:	b0 93 12 01 	sts	0x0112, r27
 1d6:	8f b7       	in	r24, 0x3f	; 63
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	8f bf       	out	0x3f, r24	; 63
 1dc:	08 95       	ret

000001de <__vector_13>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	80 91 0f 01 	lds	r24, 0x010F
 1f4:	90 91 10 01 	lds	r25, 0x0110
 1f8:	a0 91 11 01 	lds	r26, 0x0111
 1fc:	b0 91 12 01 	lds	r27, 0x0112
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	a1 09       	sbc	r26, r1
 204:	b1 09       	sbc	r27, r1
 206:	80 93 0f 01 	sts	0x010F, r24
 20a:	90 93 10 01 	sts	0x0110, r25
 20e:	a0 93 11 01 	sts	0x0111, r26
 212:	b0 93 12 01 	sts	0x0112, r27
 216:	89 2b       	or	r24, r25
 218:	8a 2b       	or	r24, r26
 21a:	8b 2b       	or	r24, r27
 21c:	99 f4       	brne	.+38     	; 0x244 <__vector_13+0x66>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 13 01 	sts	0x0113, r24
 224:	80 91 07 01 	lds	r24, 0x0107
 228:	90 91 08 01 	lds	r25, 0x0108
 22c:	a0 91 09 01 	lds	r26, 0x0109
 230:	b0 91 0a 01 	lds	r27, 0x010A
 234:	80 93 0f 01 	sts	0x010F, r24
 238:	90 93 10 01 	sts	0x0110, r25
 23c:	a0 93 11 01 	sts	0x0111, r26
 240:	b0 93 12 01 	sts	0x0112, r27
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <TickFct_State_machine_1>:
void TickFct_State_machine_1() {

	static unsigned char numCorrect = 0;
	static unsigned char t = 0;

	switch(SM1_State) { // Transitions
 256:	80 91 15 01 	lds	r24, 0x0115
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	51 f0       	breq	.+20     	; 0x272 <TickFct_State_machine_1+0x1c>
 25e:	28 f0       	brcs	.+10     	; 0x26a <TickFct_State_machine_1+0x14>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	39 f1       	breq	.+78     	; 0x2b2 <TickFct_State_machine_1+0x5c>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	49 f0       	breq	.+18     	; 0x27a <TickFct_State_machine_1+0x24>
 268:	3b c0       	rjmp	.+118    	; 0x2e0 <TickFct_State_machine_1+0x8a>
		case -1:
		SM1_State = SM1_Init;
		break;
		case SM1_Init:
		if (1) {
			SM1_State = SM1_Pick;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 15 01 	sts	0x0115, r24
 270:	45 c0       	rjmp	.+138    	; 0x2fc <TickFct_State_machine_1+0xa6>
		}
		break;
		case SM1_Pick:
		if (1) {
			SM1_State = SM1_Input;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	80 93 15 01 	sts	0x0115, r24
		}
		break;
 278:	08 95       	ret
		case SM1_Input:
		if(tempA == choices[i])
 27a:	80 91 14 01 	lds	r24, 0x0114
 27e:	e0 91 16 01 	lds	r30, 0x0116
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 5f       	subi	r30, 0xFC	; 252
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	90 81       	ld	r25, Z
 28a:	98 13       	cpse	r25, r24
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <TickFct_State_machine_1+0x4a>
		{
			SM1_State = SM1_Pick;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 15 01 	sts	0x0115, r24
			numCorrect++;
 294:	80 91 0d 01 	lds	r24, 0x010D
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 0d 01 	sts	0x010D, r24
 29e:	23 c0       	rjmp	.+70     	; 0x2e6 <TickFct_State_machine_1+0x90>
		}
		else if(tempA == 0x00)
 2a0:	88 23       	and	r24, r24
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <TickFct_State_machine_1+0x50>
 2a4:	4e c0       	rjmp	.+156    	; 0x342 <TickFct_State_machine_1+0xec>
		{
			SM1_State = SM1_Input;
		}
		else if (tempA != choices[i]) {
			SM1_State = SM1_Wrong;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 15 01 	sts	0x0115, r24
			numCorrect = 0;
 2ac:	10 92 0d 01 	sts	0x010D, r1
 2b0:	1a c0       	rjmp	.+52     	; 0x2e6 <TickFct_State_machine_1+0x90>
		}
		break;
		case SM1_Wrong:
		if (t == 8) {
 2b2:	80 91 0c 01 	lds	r24, 0x010C
 2b6:	88 30       	cpi	r24, 0x08	; 8
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <TickFct_State_machine_1+0x7e>
			SM1_State = SM1_Input;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	80 93 15 01 	sts	0x0115, r24
			t = 0;
 2c0:	10 92 0c 01 	sts	0x010C, r1
			PORTC = choices[i];
 2c4:	e0 91 16 01 	lds	r30, 0x0116
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 5f       	subi	r30, 0xFC	; 252
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 81       	ld	r24, Z
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <TickFct_State_machine_1+0x90>
		}
		else if (t < 8) {
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	68 f5       	brcc	.+90     	; 0x332 <TickFct_State_machine_1+0xdc>
			SM1_State = SM1_Wrong;
			t++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 0c 01 	sts	0x010C, r24
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <TickFct_State_machine_1+0x90>
		}
		break;
		default:
		SM1_State = SM1_Init;
 2e0:	10 92 15 01 	sts	0x0115, r1
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <TickFct_State_machine_1+0xa0>
	} // Transitions

	switch(SM1_State) { // State actions
 2e6:	80 91 15 01 	lds	r24, 0x0115
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	39 f0       	breq	.+14     	; 0x2fc <TickFct_State_machine_1+0xa6>
 2ee:	18 f0       	brcs	.+6      	; 0x2f6 <TickFct_State_machine_1+0xa0>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	f9 f0       	breq	.+62     	; 0x332 <TickFct_State_machine_1+0xdc>
 2f4:	08 95       	ret
		case SM1_Init:
		numCorrect = 0;
 2f6:	10 92 0d 01 	sts	0x010D, r1
		break;
 2fa:	08 95       	ret
		case SM1_Pick:
		i = rand() % 3;
 2fc:	d4 d0       	rcall	.+424    	; 0x4a6 <rand>
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	63 d0       	rcall	.+198    	; 0x3ca <__divmodhi4>
 304:	80 93 16 01 	sts	0x0116, r24

		if(numCorrect == 5)
 308:	20 91 0d 01 	lds	r18, 0x010D
 30c:	25 30       	cpi	r18, 0x05	; 5
 30e:	51 f4       	brne	.+20     	; 0x324 <TickFct_State_machine_1+0xce>
		{
			PORTC = 0xFF;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	88 b9       	out	0x08, r24	; 8
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 314:	80 91 c8 00 	lds	r24, 0x00C8
			if(USART_IsSendReady(1))
 318:	85 ff       	sbrs	r24, 5
 31a:	13 c0       	rjmp	.+38     	; 0x342 <TickFct_State_machine_1+0xec>
			{
				USART_Send(0x01, 1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	16 cf       	rjmp	.-468    	; 0x14e <USART_Send>
 322:	08 95       	ret
			}
		}
		else
		{
				PORTC = choices[i];
 324:	99 27       	eor	r25, r25
 326:	fc 01       	movw	r30, r24
 328:	ec 5f       	subi	r30, 0xFC	; 252
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	80 81       	ld	r24, Z
 32e:	88 b9       	out	0x08, r24	; 8
 330:	08 95       	ret
		}
		break;
		case SM1_Input:
		break;
		case SM1_Wrong:
		if(t % 2 == 0)
 332:	80 91 0c 01 	lds	r24, 0x010C
 336:	80 fd       	sbrc	r24, 0
 338:	03 c0       	rjmp	.+6      	; 0x340 <TickFct_State_machine_1+0xea>
		PORTC = 0xFF;
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	88 b9       	out	0x08, r24	; 8
 33e:	08 95       	ret
		else
		PORTC = 0x00;
 340:	18 b8       	out	0x08, r1	; 8
 342:	08 95       	ret

00000344 <main>:

}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 344:	11 b8       	out	0x01, r1	; 1
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 34a:	87 b9       	out	0x07, r24	; 7
 34c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0xFF;
 34e:	8a b9       	out	0x0a, r24	; 10
 350:	8b b9       	out	0x0b, r24	; 11
	unsigned char temp;
	initUSART(0);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	b9 de       	rcall	.-654    	; 0xc8 <initUSART>
	initUSART(1);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	b7 de       	rcall	.-658    	; 0xc8 <initUSART>
	USART_Flush(0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	d7 de       	rcall	.-594    	; 0x10c <USART_Flush>
	}
}

void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 35e:	84 e6       	ldi	r24, 0x64	; 100
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	a0 e0       	ldi	r26, 0x00	; 0
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	80 93 07 01 	sts	0x0107, r24
 36a:	90 93 08 01 	sts	0x0108, r25
 36e:	a0 93 09 01 	sts	0x0109, r26
 372:	b0 93 0a 01 	sts	0x010A, r27
	_avr_timer_cntcurr = _avr_timer_M;
 376:	80 93 0f 01 	sts	0x010F, r24
 37a:	90 93 10 01 	sts	0x0110, r25
 37e:	a0 93 11 01 	sts	0x0111, r26
 382:	b0 93 12 01 	sts	0x0112, r27
	initUSART(0);
	initUSART(1);
	USART_Flush(0);
	/* Replace with your application code */
	TimerSet(100);
	TimerOn();
 386:	07 df       	rcall	.-498    	; 0x196 <TimerOn>
	srand(seed);
 388:	80 91 0b 01 	lds	r24, 0x010B
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	8e d0       	rcall	.+284    	; 0x4ac <srand>
	SM1_State = SM1_Init;
 390:	10 92 15 01 	sts	0x0115, r1
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 394:	c0 ec       	ldi	r28, 0xC0	; 192
 396:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		tempA = ~PINA;
 398:	80 b1       	in	r24, 0x00	; 0
 39a:	80 95       	com	r24
 39c:	80 93 14 01 	sts	0x0114, r24
		TickFct_State_machine_1();
 3a0:	5a df       	rcall	.-332    	; 0x256 <TickFct_State_machine_1>
 3a2:	88 81       	ld	r24, Y
		if(USART_HasReceived(0))
 3a4:	88 23       	and	r24, r24
 3a6:	2c f4       	brge	.+10     	; 0x3b2 <main+0x6e>
		{
			temp = USART_Receive(0);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	e3 de       	rcall	.-570    	; 0x172 <USART_Receive>
			PORTA = temp;
 3ac:	82 b9       	out	0x02, r24	; 2
			USART_Flush(0);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	ad de       	rcall	.-678    	; 0x10c <USART_Flush>
		}
		while(!TimerFlag);
 3b2:	80 91 13 01 	lds	r24, 0x0113
 3b6:	88 23       	and	r24, r24
 3b8:	e1 f3       	breq	.-8      	; 0x3b2 <main+0x6e>
		TimerFlag = 0;
 3ba:	10 92 13 01 	sts	0x0113, r1
		seed = seed + 10;
 3be:	80 91 0b 01 	lds	r24, 0x010B
 3c2:	86 5f       	subi	r24, 0xF6	; 246
 3c4:	80 93 0b 01 	sts	0x010B, r24
	}
 3c8:	e7 cf       	rjmp	.-50     	; 0x398 <main+0x54>

000003ca <__divmodhi4>:
 3ca:	97 fb       	bst	r25, 7
 3cc:	07 2e       	mov	r0, r23
 3ce:	16 f4       	brtc	.+4      	; 0x3d4 <__divmodhi4+0xa>
 3d0:	00 94       	com	r0
 3d2:	06 d0       	rcall	.+12     	; 0x3e0 <__divmodhi4_neg1>
 3d4:	77 fd       	sbrc	r23, 7
 3d6:	08 d0       	rcall	.+16     	; 0x3e8 <__divmodhi4_neg2>
 3d8:	0b d0       	rcall	.+22     	; 0x3f0 <__udivmodhi4>
 3da:	07 fc       	sbrc	r0, 7
 3dc:	05 d0       	rcall	.+10     	; 0x3e8 <__divmodhi4_neg2>
 3de:	3e f4       	brtc	.+14     	; 0x3ee <__divmodhi4_exit>

000003e0 <__divmodhi4_neg1>:
 3e0:	90 95       	com	r25
 3e2:	81 95       	neg	r24
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <__divmodhi4_neg2>:
 3e8:	70 95       	com	r23
 3ea:	61 95       	neg	r22
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255

000003ee <__divmodhi4_exit>:
 3ee:	08 95       	ret

000003f0 <__udivmodhi4>:
 3f0:	aa 1b       	sub	r26, r26
 3f2:	bb 1b       	sub	r27, r27
 3f4:	51 e1       	ldi	r21, 0x11	; 17
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <__udivmodhi4_ep>

000003f8 <__udivmodhi4_loop>:
 3f8:	aa 1f       	adc	r26, r26
 3fa:	bb 1f       	adc	r27, r27
 3fc:	a6 17       	cp	r26, r22
 3fe:	b7 07       	cpc	r27, r23
 400:	10 f0       	brcs	.+4      	; 0x406 <__udivmodhi4_ep>
 402:	a6 1b       	sub	r26, r22
 404:	b7 0b       	sbc	r27, r23

00000406 <__udivmodhi4_ep>:
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	5a 95       	dec	r21
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <__udivmodhi4_loop>
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	bc 01       	movw	r22, r24
 414:	cd 01       	movw	r24, r26
 416:	08 95       	ret

00000418 <do_rand>:
 418:	8f 92       	push	r8
 41a:	9f 92       	push	r9
 41c:	af 92       	push	r10
 41e:	bf 92       	push	r11
 420:	cf 92       	push	r12
 422:	df 92       	push	r13
 424:	ef 92       	push	r14
 426:	ff 92       	push	r15
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	ec 01       	movw	r28, r24
 42e:	68 81       	ld	r22, Y
 430:	79 81       	ldd	r23, Y+1	; 0x01
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	9b 81       	ldd	r25, Y+3	; 0x03
 436:	61 15       	cp	r22, r1
 438:	71 05       	cpc	r23, r1
 43a:	81 05       	cpc	r24, r1
 43c:	91 05       	cpc	r25, r1
 43e:	21 f4       	brne	.+8      	; 0x448 <do_rand+0x30>
 440:	64 e2       	ldi	r22, 0x24	; 36
 442:	79 ed       	ldi	r23, 0xD9	; 217
 444:	8b e5       	ldi	r24, 0x5B	; 91
 446:	97 e0       	ldi	r25, 0x07	; 7
 448:	2d e1       	ldi	r18, 0x1D	; 29
 44a:	33 ef       	ldi	r19, 0xF3	; 243
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	38 d0       	rcall	.+112    	; 0x4c2 <__divmodsi4>
 452:	49 01       	movw	r8, r18
 454:	5a 01       	movw	r10, r20
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	a7 ea       	ldi	r26, 0xA7	; 167
 45c:	b1 e4       	ldi	r27, 0x41	; 65
 45e:	4d d0       	rcall	.+154    	; 0x4fa <__muluhisi3>
 460:	6b 01       	movw	r12, r22
 462:	7c 01       	movw	r14, r24
 464:	ac ee       	ldi	r26, 0xEC	; 236
 466:	b4 ef       	ldi	r27, 0xF4	; 244
 468:	a5 01       	movw	r20, r10
 46a:	94 01       	movw	r18, r8
 46c:	52 d0       	rcall	.+164    	; 0x512 <__mulohisi3>
 46e:	dc 01       	movw	r26, r24
 470:	cb 01       	movw	r24, r22
 472:	8c 0d       	add	r24, r12
 474:	9d 1d       	adc	r25, r13
 476:	ae 1d       	adc	r26, r14
 478:	bf 1d       	adc	r27, r15
 47a:	b7 ff       	sbrs	r27, 7
 47c:	03 c0       	rjmp	.+6      	; 0x484 <do_rand+0x6c>
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	a1 09       	sbc	r26, r1
 482:	b0 48       	sbci	r27, 0x80	; 128
 484:	88 83       	st	Y, r24
 486:	99 83       	std	Y+1, r25	; 0x01
 488:	aa 83       	std	Y+2, r26	; 0x02
 48a:	bb 83       	std	Y+3, r27	; 0x03
 48c:	9f 77       	andi	r25, 0x7F	; 127
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	bf 90       	pop	r11
 49c:	af 90       	pop	r10
 49e:	9f 90       	pop	r9
 4a0:	8f 90       	pop	r8
 4a2:	08 95       	ret

000004a4 <rand_r>:
 4a4:	b9 cf       	rjmp	.-142    	; 0x418 <do_rand>

000004a6 <rand>:
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	b6 cf       	rjmp	.-148    	; 0x418 <do_rand>

000004ac <srand>:
 4ac:	a0 e0       	ldi	r26, 0x00	; 0
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	80 93 00 01 	sts	0x0100, r24
 4b4:	90 93 01 01 	sts	0x0101, r25
 4b8:	a0 93 02 01 	sts	0x0102, r26
 4bc:	b0 93 03 01 	sts	0x0103, r27
 4c0:	08 95       	ret

000004c2 <__divmodsi4>:
 4c2:	05 2e       	mov	r0, r21
 4c4:	97 fb       	bst	r25, 7
 4c6:	16 f4       	brtc	.+4      	; 0x4cc <__divmodsi4+0xa>
 4c8:	00 94       	com	r0
 4ca:	0f d0       	rcall	.+30     	; 0x4ea <__negsi2>
 4cc:	57 fd       	sbrc	r21, 7
 4ce:	05 d0       	rcall	.+10     	; 0x4da <__divmodsi4_neg2>
 4d0:	24 d0       	rcall	.+72     	; 0x51a <__udivmodsi4>
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	02 d0       	rcall	.+4      	; 0x4da <__divmodsi4_neg2>
 4d6:	46 f4       	brtc	.+16     	; 0x4e8 <__divmodsi4_exit>
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__negsi2>

000004da <__divmodsi4_neg2>:
 4da:	50 95       	com	r21
 4dc:	40 95       	com	r20
 4de:	30 95       	com	r19
 4e0:	21 95       	neg	r18
 4e2:	3f 4f       	sbci	r19, 0xFF	; 255
 4e4:	4f 4f       	sbci	r20, 0xFF	; 255
 4e6:	5f 4f       	sbci	r21, 0xFF	; 255

000004e8 <__divmodsi4_exit>:
 4e8:	08 95       	ret

000004ea <__negsi2>:
 4ea:	90 95       	com	r25
 4ec:	80 95       	com	r24
 4ee:	70 95       	com	r23
 4f0:	61 95       	neg	r22
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	8f 4f       	sbci	r24, 0xFF	; 255
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	08 95       	ret

000004fa <__muluhisi3>:
 4fa:	31 d0       	rcall	.+98     	; 0x55e <__umulhisi3>
 4fc:	a5 9f       	mul	r26, r21
 4fe:	90 0d       	add	r25, r0
 500:	b4 9f       	mul	r27, r20
 502:	90 0d       	add	r25, r0
 504:	a4 9f       	mul	r26, r20
 506:	80 0d       	add	r24, r0
 508:	91 1d       	adc	r25, r1
 50a:	11 24       	eor	r1, r1
 50c:	08 95       	ret

0000050e <__mulshisi3>:
 50e:	b7 ff       	sbrs	r27, 7
 510:	f4 cf       	rjmp	.-24     	; 0x4fa <__muluhisi3>

00000512 <__mulohisi3>:
 512:	f3 df       	rcall	.-26     	; 0x4fa <__muluhisi3>
 514:	82 1b       	sub	r24, r18
 516:	93 0b       	sbc	r25, r19
 518:	08 95       	ret

0000051a <__udivmodsi4>:
 51a:	a1 e2       	ldi	r26, 0x21	; 33
 51c:	1a 2e       	mov	r1, r26
 51e:	aa 1b       	sub	r26, r26
 520:	bb 1b       	sub	r27, r27
 522:	fd 01       	movw	r30, r26
 524:	0d c0       	rjmp	.+26     	; 0x540 <__udivmodsi4_ep>

00000526 <__udivmodsi4_loop>:
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	ee 1f       	adc	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	a2 17       	cp	r26, r18
 530:	b3 07       	cpc	r27, r19
 532:	e4 07       	cpc	r30, r20
 534:	f5 07       	cpc	r31, r21
 536:	20 f0       	brcs	.+8      	; 0x540 <__udivmodsi4_ep>
 538:	a2 1b       	sub	r26, r18
 53a:	b3 0b       	sbc	r27, r19
 53c:	e4 0b       	sbc	r30, r20
 53e:	f5 0b       	sbc	r31, r21

00000540 <__udivmodsi4_ep>:
 540:	66 1f       	adc	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a 94       	dec	r1
 54a:	69 f7       	brne	.-38     	; 0x526 <__udivmodsi4_loop>
 54c:	60 95       	com	r22
 54e:	70 95       	com	r23
 550:	80 95       	com	r24
 552:	90 95       	com	r25
 554:	9b 01       	movw	r18, r22
 556:	ac 01       	movw	r20, r24
 558:	bd 01       	movw	r22, r26
 55a:	cf 01       	movw	r24, r30
 55c:	08 95       	ret

0000055e <__umulhisi3>:
 55e:	a2 9f       	mul	r26, r18
 560:	b0 01       	movw	r22, r0
 562:	b3 9f       	mul	r27, r19
 564:	c0 01       	movw	r24, r0
 566:	a3 9f       	mul	r26, r19
 568:	70 0d       	add	r23, r0
 56a:	81 1d       	adc	r24, r1
 56c:	11 24       	eor	r1, r1
 56e:	91 1d       	adc	r25, r1
 570:	b2 9f       	mul	r27, r18
 572:	70 0d       	add	r23, r0
 574:	81 1d       	adc	r24, r1
 576:	11 24       	eor	r1, r1
 578:	91 1d       	adc	r25, r1
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
